// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    jdccs "github.com/jdcloud-api/jdcloud-sdk-go/services/jdccs/models"
    common "github.com/jdcloud-api/jdcloud-sdk-go/services/common/models"
)

type DescribeDevicesRequest struct {

    core.JDCloudRequest

    /* IDC机房ID  */
    Idc string `json:"idc"`

    /* 页码, 默认为1 (Optional) */
    PageNumber *int `json:"pageNumber"`

    /* 分页大小，默认为20 (Optional) */
    PageSize *int `json:"pageSize"`

    /* 机柜ID (Optional) */
    CabinetId *string `json:"cabinetId"`

    /* deviceId - 设备实例ID，精确匹配，支持多个
snNo - 设备SN号，精确匹配，支持多个
 (Optional) */
    Filters []common.Filter `json:"filters"`

    /* 设备类型 server:服务器 network:网络设备 storage:存储设备 other:其他设备 (Optional) */
    DeviceType *string `json:"deviceType"`
}

/*
 * param idc: IDC机房ID (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewDescribeDevicesRequest(
    idc string,
) *DescribeDevicesRequest {

	return &DescribeDevicesRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/idcs/{idc}/devices",
			Method:  "GET",
			Header:  nil,
			Version: "v1",
		},
        Idc: idc,
	}
}

/*
 * param idc: IDC机房ID (Required)
 * param pageNumber: 页码, 默认为1 (Optional)
 * param pageSize: 分页大小，默认为20 (Optional)
 * param cabinetId: 机柜ID (Optional)
 * param filters: deviceId - 设备实例ID，精确匹配，支持多个
snNo - 设备SN号，精确匹配，支持多个
 (Optional)
 * param deviceType: 设备类型 server:服务器 network:网络设备 storage:存储设备 other:其他设备 (Optional)
 */
func NewDescribeDevicesRequestWithAllParams(
    idc string,
    pageNumber *int,
    pageSize *int,
    cabinetId *string,
    filters []common.Filter,
    deviceType *string,
) *DescribeDevicesRequest {

    return &DescribeDevicesRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/idcs/{idc}/devices",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
        Idc: idc,
        PageNumber: pageNumber,
        PageSize: pageSize,
        CabinetId: cabinetId,
        Filters: filters,
        DeviceType: deviceType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewDescribeDevicesRequestWithoutParam() *DescribeDevicesRequest {

    return &DescribeDevicesRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/idcs/{idc}/devices",
            Method:  "GET",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param idc: IDC机房ID(Required) */
func (r *DescribeDevicesRequest) SetIdc(idc string) {
    r.Idc = idc
}

/* param pageNumber: 页码, 默认为1(Optional) */
func (r *DescribeDevicesRequest) SetPageNumber(pageNumber int) {
    r.PageNumber = &pageNumber
}

/* param pageSize: 分页大小，默认为20(Optional) */
func (r *DescribeDevicesRequest) SetPageSize(pageSize int) {
    r.PageSize = &pageSize
}

/* param cabinetId: 机柜ID(Optional) */
func (r *DescribeDevicesRequest) SetCabinetId(cabinetId string) {
    r.CabinetId = &cabinetId
}

/* param filters: deviceId - 设备实例ID，精确匹配，支持多个
snNo - 设备SN号，精确匹配，支持多个
(Optional) */
func (r *DescribeDevicesRequest) SetFilters(filters []common.Filter) {
    r.Filters = filters
}

/* param deviceType: 设备类型 server:服务器 network:网络设备 storage:存储设备 other:其他设备(Optional) */
func (r *DescribeDevicesRequest) SetDeviceType(deviceType string) {
    r.DeviceType = &deviceType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r DescribeDevicesRequest) GetRegionId() string {
    return ""
}

type DescribeDevicesResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result DescribeDevicesResult `json:"result"`
}

type DescribeDevicesResult struct {
    Devices []jdccs.DescribeDevice `json:"devices"`
    PageNumber int `json:"pageNumber"`
    PageSize int `json:"pageSize"`
    TotalCount int `json:"totalCount"`
}